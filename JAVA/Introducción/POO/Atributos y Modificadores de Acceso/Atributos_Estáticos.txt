Los atributos estáticos, al contrario de los atributos normales, son compartidos por todas las instancias (objetos)
que se crean. Esto significa que si se actualiza con cierto valor, la otra, se actualizará también con el mismo.
En un constructor por ejemplo, los atributos no se llaman con "this" sino con el nombre de la clase. En el Atributo se le pondrá "static".

-- Ejemplo con la clase Persona (archivo 1):

public class Persona {
    
    // Definir Atributos:
    
    // Definición de Atributo Estático:
    private static int personasCreadas = 0;
    private String nombre;
    private String apellido1;
    private String apellido2;
    private int edad;
    
    
    // Definir Constructor vacío para asignar valores por defecto a las variables:
    
      public Persona () {
         this.nombre = "";
         this.apellido1 = "";
         this.apellido2 = "";
         this.edad = 0;}
      
     // Definir Constructor por defecto (todos los atributos) para inicialziar los atributos privados.
       public Persona (String nombre, String apellido1, String apellido2, int edad){
       
        // "this" sirve para hacer referencia a los atributos de la clase e inicalizarlo con el valor de cada variable. 
         this.nombre = nombre;
         this.apellido1 = apellido1;
         this.apellido2 = apellido2;
         this.edad = edad;
         // Cada vez que se crea un objeto Persona se incrementa el contador. 
         personasCreadas++;
         System.out.println("Número de personas creadas: " + Persona.personasCreadas);
         
         if (edad < 0) {
         throw new IllegalArgumentException("La edad no puede ser negativa."); 
         
         } 
       } 
       
   // Métodos: Getters y Setters:
       
      // El método get solo se encarga de obtener el valor del atributo. 
       public String get_Nombre(){
       return this.nombre;
       }
       
        // El método set se encarga de obtener y modificar el valor del atributo. 
      public void set_Nombre(String nombre){
       this.nombre = nombre;
       }

    public String getApellido1() {
        return this.apellido1;
    }

    public void setApellido1(String apellido1) {
        this.apellido1 = apellido1;
    }

    public String getApellido2() {
        return this.apellido2;
    }

    public void setApellido2(String apellido2) {
        this.apellido2 = apellido2;
    }

    public int getEdad() {
        return this.edad;
    }

    public void setEdad(int edad) {
        // En este método tambié se define esta condición para que no se pueda establecer una edad menor a 0.
        if (edad < 0) {
         throw new IllegalArgumentException("La edad no puede ser negativa."); 
         } 
        this.edad = edad;
    }
     
    // -- Métodos: ---
    
    // Creación de método para devolver el Nombre Completo:
    
    public String NombreCompleto() {
        return this.nombre + " " + this.apellido1 + " " + this.apellido2;
    }
    
    public boolean mayorEdad() {
    return edad >= 18;
    
    }
    
      
       
}


-- Segundo archivo:


public class POO {

    public static void main(String[] args) {
       
        try {   
        // Objeto de tipo Persona
        Persona p = new Persona("Samuel", "Hernandez", "Santisteban", 21);
        Persona p2 = new Persona("Mamuel", "Hernandez", "Santisteban", 22);
        
        // Se llaman a los métodos para mostrar el nombre completo de las dos personas:
        System.out.println("El nombre completo es: " + p.NombreCompleto());
        System.out.println("El nombre completo es: " + p2.NombreCompleto());
        
        if (p.mayorEdad() && p2.mayorEdad()){
            System.out.println(p.get_Nombre() + " es mayor de edad, tiene: " + p.getEdad());
            System.out.println(p.get_Nombre() + " es mayor de edad, tiene: " + p2.getEdad());
        } else {
            System.out.println(p.get_Nombre() + " es menor de edad, tiene: " + p.getEdad());
            System.out.println(p2.get_Nombre() + " es menor de edad, tiene: " + p.getEdad());
        }
       
        } catch (IllegalArgumentException e){
          System.out.println(e.getMessage());
       
        }
        // Ambos tienen el mismo valor (2). Actúa como un contador universal:
        System.out.println("Valor para ambos objetos: " + Persona.personasCreadas);
      
    }
}