Un objeto puede actuar como un atributo de otra clase, 
lo que significa que una clase puede contener referencias a instancias (objetos) de otras clases como parte de su definición.


-- Archivo 1 clase persona

public class Persona {
    
    // Definir Atributos:
    
    // Definición de Atributo Estático:
    private static int personasCreadas = 0;
    
    // Usar atributo que es un objeto de la clase "Dirección":
    private Dirección direccion;
    
    private String nombre;
    private String apellido1;
    private String apellido2;
    private int edad;
    
    // Definir Constructor vacío para asignar valores por defecto a las variables:
    
      public Persona () {
         this.nombre = "";
         this.apellido1 = "";
         this.apellido2 = "";
         this.edad = 0;
         new Dirección();
      }

     // Definir Constructor por defecto (todos los atributos) para inicialziar los atributos privados.
       public Persona (String nombre, String apellido1, String apellido2, int edad, Dirección direccion){
       
        // Validar que el atributo-objeto de la dirección no esté vacío:
         if (direccion == null) {
         throw new IllegalArgumentException("La Dirección no puede estar vacía."); 
         }   
           
         // Aquí se podría hacer uso del método de validación de edad definido en la clase "ValidarEdadPersona":
         if (!ValidarEdadPersona.validar_edad(edad)) {
         throw new IllegalArgumentException("La edad debe estar dentro del rango. [0-99]"); 
         } 
         
        // "this" sirve para hacer referencia a los atributos de la clase e inicalizarlo con el valor de cada variable. 
         this.nombre = nombre;
         this.apellido1 = apellido1;
         this.apellido2 = apellido2;
         this.edad = edad;
         this.direccion = direccion;
         
         // Cada vez que se crea un objeto Persona se incrementa el contador. 
         personasCreadas++;
         System.out.println("Número de personas creadas: " + Persona.personasCreadas);
         
     
       } 
       
   // Métodos: Getters y Setters:
       
      // El método get solo se encarga de obtener el valor del atributo. 
       public String get_Nombre(){
       return this.nombre;
       }
       
        // El método set se encarga de obtener y modificar el valor del atributo. 
      public void set_Nombre(String nombre){
       this.nombre = nombre;
       }

    public String getApellido1() {
        return this.apellido1;
    }

    public void setApellido1(String apellido1) {
        this.apellido1 = apellido1;
    }

    public String getApellido2() {
        return this.apellido2;
    }

    public void setApellido2(String apellido2) {
        this.apellido2 = apellido2;
    }

    public int getEdad() {
        return this.edad;
    }

    public void setEdad(int edad) {
        // En este método tambié se define esta condición para que no se pueda establecer una edad menor a 0.
       if (!ValidarEdadPersona.validar_edad(edad)) {
         throw new IllegalArgumentException("La edad debe estar dentro del rango. [0-99]"); 
         
         } 
        this.edad = edad;
    }

    
    // Creo un Método Get para el atributo estático creado en la clase.
    // Al ser estático, para llamarlo se usa el nombre de la clase.
    public static int getPersonasCreadas() {
        return personasCreadas;
    }
    
    // Creo un Método Get para obtener la información formateada desde la clase "Dirección"
    // para el objeto que ha sido definido como atributo en la clase "Persona":
    public Dirección getDireccion() {
        return direccion;
    }
    
    // -- Métodos: ---
    
    // Creación de método para devolver el Nombre Completo:
    
    public String NombreCompleto() {
        return this.nombre + " " + this.apellido1 + " " + this.apellido2;
    }
    
    public boolean mayorEdad() {
    return edad >= 18;
    
    }
   
}




-- Archivo 2 clase Dirección (atributo-objeto)

public class Dirección {
  
  private String calle;
  private int numero;
  private String localidad;  
  private String provincia;  

    public Dirección() {
     this("",0,"","");
    }

    public Dirección(String calle, int numero, String localidad, String provincia) {
        this.calle = calle;
        this.numero = numero;
        this.localidad = localidad;
        this.provincia = provincia;
    }

    public String getCalle() {
        return calle;
    }

    public void setCalle(String calle) {
        this.calle = calle;
    }

    public int getNumero() {
        return numero;
    }

    public void setNumero(int numero) {
        this.numero = numero;
    }

    public String getLocalidad() {
        return localidad;
    }

    public void setLocalidad(String localidad) {
        this.localidad = localidad;
    }

    public String getProvincia() {
        return provincia;
    }

    public void setProvincia(String provincia) {
        this.provincia = provincia;
    }

    @Override
    public String toString() {
        return " La calle es: " + calle + ", número: " + numero + ", localidad: " + localidad + ", provincia: " + provincia + '.';
    }
    


-- Archivo 3, salida de la información y creación de los objetos:


public class POO {

    public static void main(String[] args) {
       
        // Ambos tienen el mismo valor (0). Actúa como un contador universal:
        System.out.println("Valor para ambos objetos: " + Persona.getPersonasCreadas());

        try {  
            
        // Objeto de tipo Dirección que se esta usando como atributo de la clase Persona:
        
        Dirección direccion_p1 = new Dirección("Calle Luna", 1, "Almería", "Almería");
        Dirección direccion_p2 = new Dirección("Calle Sol", 2, "Almería", "Almería");
        
        // Objeto de tipo Persona
        Persona p = new Persona("Samuel", "Hernandez", "Santisteban", 21, direccion_p1);
        Persona p2 = new Persona("Mamuel", "Hernandez", "Santisteban", 22, direccion_p2);
        
        System.out.println("");
        // Se llaman a los métodos para mostrar el nombre completo de las dos personas:
        System.out.println("El Nombre Completo es: " + p.NombreCompleto());
        System.out.println("Su Dirección es: " + p.getDireccion());
        System.out.println("");
        System.out.println("El nombre completo es: " + p2.NombreCompleto());
        System.out.println("Su Dirección es: " + p2.getDireccion());
        System.out.println("");
        
        if (p.mayorEdad() && p2.mayorEdad()){
            System.out.println(p.get_Nombre() + " es mayor de edad, tiene: " + p.getEdad());
            System.out.println(p.get_Nombre() + " es mayor de edad, tiene: " + p2.getEdad());
        } else {
            System.out.println(p.get_Nombre() + " es menor de edad, tiene: " + p.getEdad());
            System.out.println(p2.get_Nombre() + " es menor de edad, tiene: " + p.getEdad());
        }
       
        } catch (IllegalArgumentException e){
          System.out.println(e.getMessage());
       
        }
        
    }
}

